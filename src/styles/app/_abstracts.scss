@use './variables' as *;

/* =====================================================================
  -> MIXINS
===================================================================== */
@mixin ct_text-properties {
	font-weight: normal;
	font-style: normal;
}

@mixin ct_padding-section(
	$top: var(--padding-value),
	$left-right: var(--padding-value),
	$bottom: var(--padding-value)
) {
	--padding-value: var(--spacer__104);
	@include respond-to('large--s') {
		--padding-value: var(--spacer__72);
	}
	@include respond-to('medium--l') {
		--padding-value: var(--spacer__56);
	}
	@include respond-to('medium--s') {
		--padding-value: var(--spacer__44);
	}
	@include respond-to('medium--xs') {
		--padding-value: var(--spacer__32);
	}
	@include respond-to('small--m') {
		--padding-value: var(--spacer__20);
	}

	@if $left-right == true {
		padding: 0 var(--padding-value) 0;
	} @else {
		padding: $top $left-right $bottom;
	}
}

@mixin ct_container-size {
	max-width: 78rem;
	margin: 0 auto;

	@include respond-to('large--s') {
		margin: 0 var(--spacer__24);
	}

	@include respond-to('medium--xs') {
		margin: 0 var(--spacer__16);
	}
}

@mixin ct_focus-style(
	$size: 4px,
	$offset: 4px,
	$color: var(--color__text--main)
) {
	outline: $size dotted transparent;
	outline-offset: $offset;
	transition: all var(--duration__350) var(--easing__s);
	transition-property: outline, outline-offset;

	// Fallback for Safari &:active,
	&:focus {
		outline: $size dotted $color;
		outline-offset: $offset;
	}

	// HACK for use @supports selector() with SASS
	@supports #{'\selector(*:focus-visible)'} {
		&:focus {
			outline: none;
		}

		&:focus-visible {
			outline: $size dotted $color;
			outline-offset: $offset;
		}
	}
}

@mixin ct_bar-left-image {
	&::after {
		content: '';
		position: absolute;
		top: 50%;
		left: -1rem;
		z-index: -1;
		transform: translateY(-50%);

		height: 82%;
		width: 4rem;
		border-radius: var(--rounder-corners--img);
		background-color: var(--color__element-1);
	}
}

@mixin ct__scrollbars(
	$size: 6px,
	$foreground-color: #bdbdbd,
	$background-color: #f2f2f2
) {
	// For Google Chrome
	&::-webkit-scrollbar {
		width: $size;
		height: $size;
	}
	&::-webkit-scrollbar-thumb {
		background: $foreground-color;
	}
	&::-webkit-scrollbar-track {
		background: $background-color;
	}

	// Standard version (Firefox only for now)
	scrollbar-color: $foreground-color $background-color;
}

/* =====================================================================
  -> FUNCTIONS
===================================================================== */
/*
  Convert px to rem
  $size = font size value in px
  $rem-default = default rem value
*/
@function ct_calculate-rem($size) {
	$rem-default: 16;
	$rem-size: calc($size / $rem-default);
	@return #{$rem-size}rem;
}

/*
  Calculate line-height
  $lh = line height value in px
  $size = font size value in px
*/
@function ct_calculate-lh($lh, $size) {
	@return calc($lh / $size);
}

/*
  Convert rem to px
  $rem = font size value in rem
  $rem-default = default rem value
*/
@function ct_calculate-px($rem) {
	$rem-default: 16;
	$px-size: calc($rem * $rem-default);
	@return #{$px-size}px;
}

/* =====================================================================
  -> MEDIA QUERY MANAGER
===================================================================== */
/// @param {String} $breakpoint - Breakpoint name
/// @require $breakpoints

$text: 'only screen and';
@mixin respond-to($breakpoint) {
	// If the key exists in the map
	@if map-has-key($breakpoints, $breakpoint) {
		// Prints a media query based on the value
		@media #{$text inspect(map-get($breakpoints, $breakpoint))} {
			@content;
		}
	}

	// If the key doesn't exist in the map
	@else {
		@warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
        + "Available breakpoints are: #{map-keys($breakpoints)}.";
	}
}
